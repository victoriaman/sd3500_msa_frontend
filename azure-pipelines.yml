# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self
# Pool build
pool:
  vmImage: 'ubuntu-latest'

variables:
  # Container registry service connection established during pipeline creation
  imageRepository: 'sd3500_msa_frontend'
  containerRegistry: 'practicaldevopsregistry'             # This is your ACR service connection
  dockerRegistry: 'practicaldevopsregistry.azurecr.io'     # This is your actual ACR hostname
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  fullImageName: '$(dockerRegistry)/$(imageRepository):$(tag)'
  sonarCloudServiceEndpoint: 'sonar connection'
  sonarOrganization: 'victoriaman'
  sonarProjectKey: 'victoriaman_sd3500_msa_frontend'
  sonarProjectName: 'sd3500_msa_frontend'
  azureSubscriptionName: 'Azure subscription 1'
  aksResourceGroup: 'devops-aks'
  aksClusterName: 'devops-aks'
  aksNameSpace: 'devops-ns'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: ScanSourceByTrivy
  displayName: Scan source code by trivy
  jobs:
  - job: TrivySourceScan
    displayName: Scan source code
    steps:
    - task: NodeTaskRunnerInstaller@0
      displayName: Install Node.js
      inputs:
        nodeVersion: '16'
    - task: Npm@1
      displayName: Npm install
      inputs:
        command: 'install'
        workingDir: '.'
    - task: trivy@2
      displayName: Scan source code
      inputs:
        version: 'latest'
        type: 'filesystem'
        target: '.'
        severities: 'HIGH,CRITICAL'
        ignoreUnfixed: true
        showSuppressed: true
        ignoreScanErrors: true

- stage: ScanSourceBySonar
  displayName: Scan source code by Sonar
  jobs:
  - job: SonarScan
    displayName: Run SonarCloud Analysis
    steps:
    - task: SonarCloudPrepare@3
      inputs:
        SonarQube: $(sonarCloudServiceEndpoint)
        organization: $(sonarOrganization)
        scannerMode: 'cli'
        configMode: 'manual'
        cliProjectKey: $(sonarProjectKey)
        cliProjectName: $(sonarProjectName)
        cliSources: '.'

# --- Stage 3: Build, Scan Image with Trivy, Push to ACR
- stage: Build
  displayName: Build, scan and push an image to container registry
  jobs:
  - job: Build
    displayName: Build, scan and push an image to container registry
    steps:
    - task: Docker@2
      displayName: Build Docker image
      inputs:
        containerRegistry: $(containerRegistry)
        repository: $(imageRepository)
        command: 'build'
        Dockerfile: $(dockerfilePath)
        buildContext: '.'
        tags: |
          $(tag)

    - task: trivy@2
      displayName: Scan Docker image with Trivy
      inputs:
        type: 'image'
        target: '$(fullImageName)'
        severities: 'CRITICAL,HIGH'
        ignoreUnfixed: true
        showSuppressed: true
        ignoreScanErrors: true
        version: 'latest'

    - task: Docker@2
      displayName: Push Docker image to container registry
      inputs:
        containerRegistry: $(containerRegistry)
        repository: $(imageRepository)
        command: 'push'
        tags: |
          $(tag)

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  jobs:
  - deployment: DeployFrontend
    displayName: Deploy frontend to AKS
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "DEBUG: Checking if frontend.yaml exists..."
              ls -al $(Build.SourcesDirectory)/.azure-devops-cd

          - script: |
              echo "Replacing image tag in frontend.yaml"
              sed -i 's|sample-image-tag|$(fullImageName)|g' $(Build.SourcesDirectory)/.azure-devops-cd/frontend.yaml
            displayName: Replace image tag in YAML

          - script: |
              echo "Ensuring Kubernetes namespace $(aksNameSpace) exists..."
              kubectl get namespace $(aksNameSpace) || kubectl create namespace $(aksNameSpace)
            displayName: Ensure $(aksNameSpace) namespace exists

          - task: KubernetesManifest@1
            displayName: 'Deploy'
            inputs:
              action: 'deploy'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'test-devops-aks-devops-ns-1748268581468'
              namespace: 'devops-ns'
              manifests: $(Build.SourcesDirectory)/.azure-devops-cd/frontend.yaml

          # - task: Kubernetes@1
          #   displayName: Set image tag in deployment YAML
          #   inputs:
          #     connectionType: 'Azure Resource Manager'
          #     azureSubscription: '$(azureSubscriptionName)'
          #     azureResourceGroup: '$(aksResourceGroup)'
          #     kubernetesCluster: '$(aksClusterName)'
          #     namespace: '$(aksNameSpace)'
          #     command: 'apply'
          #     useConfigurationFile: true
          #     configuration: |
          #       $(Build.SourcesDirectory)/.azure-devops-cd/frontend.yaml
    