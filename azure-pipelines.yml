# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self
# Pool build
pool:
  vmImage: 'ubuntu-latest'

variables:
  # Container registry service connection established during pipeline creation
  imageRepository: 'sd3500_msa_frontend'
  containerRegistry: 'practicaldevopsregistry'             # This is your ACR service connection
  dockerRegistry: 'practicaldevopsregistry.azurecr.io'     # This is your actual ACR hostname
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  fullImageName: '$(dockerRegistry)/$(imageRepository):$(tag)'
  sonarCloudServiceEndpoint: 'sonar connection'
  sonarOrganization: 'victoriaman'
  sonarProjectKey: 'victoriaman_sd3500_msa_frontend'
  sonarProjectName: 'sd3500_msa_frontend'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: ScanSourceByTrivy
  displayName: Scan source code by trivy
  jobs:
  - job: TrivySourceScan
    displayName: Scan source code
    steps:
    - task: NodeTaskRunnerInstaller@0
      displayName: Install Node.js
      inputs:
        nodeVersion: '16'
    - task: Npm@1
      displayName: Npm install
      inputs:
        command: 'install'
        workingDir: '.'
    - task: trivy@2
      displayName: Scan source code
      inputs:
        version: 'latest'
        type: 'filesystem'
        target: '.'
        severities: 'HIGH,CRITICAL'
        ignoreUnfixed: true
        showSuppressed: true
        ignoreScanErrors: true

- stage: ScanSourceBySonar
  displayName: Scan source code by Sonar
  jobs:
  - job: SonarScan
    displayName: Run SonarCloud Analysis
    steps:
    - task: SonarCloudPrepare@3
      inputs:
        SonarQube: $(sonarCloudServiceEndpoint)
        organization: $(sonarOrganization)
        scannerMode: 'cli'
        configMode: 'manual'
        cliProjectKey: $(sonarProjectKey)
        cliProjectName: $(sonarProjectName)
        cliSources: '.'

# --- Stage 3: Build, Scan Image with Trivy, Push to ACR
- stage: Build
  displayName: Build, scan and push an image to container registry
  jobs:
  - job: Build
    displayName: Build, scan and push an image to container registry
    steps:
    - task: Docker@2
      displayName: Build Docker image
      inputs:
        containerRegistry: $(containerRegistry)
        repository: $(imageRepository)
        command: 'build'
        Dockerfile: $(dockerfilePath)
        buildContext: '.'
        tags: |
          $(tag)

    - script: |
        echo "Tagging image with full name: $(fullImageName)"
        docker tag $(imageRepository):$(tag) $(fullImageName)
      displayName: Tag image with full registry path

    - script: |
        trivy image --severity HIGH,CRITICAL --ignore-unfixed --format table $(fullImageName)
      displayName: Scan Docker image with Trivy

    - task: Docker@2
      displayName: Push Docker image to container registry
      inputs:
        containerRegistry: $(containerRegistry)
        repository: $(imageRepository)
        command: 'push'
        tags: |
                $(tag)
    